{"version":3,"sources":["/Users/shengbeiniao/Documents/GitHub/Fork/docz-website/src/docs/documentation/references/creating-themes.mdx"],"names":["MDXContent","props","_this","Object","_Users_shengbeiniao_Documents_GitHub_Fork_docz_website_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_Users_shengbeiniao_Documents_GitHub_Fork_docz_website_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_shengbeiniao_Documents_GitHub_Fork_docz_website_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","layout","_this$props","components","_Users_shengbeiniao_Documents_GitHub_Fork_docz_website_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_7__","name","id","parentName","href","className","target","rel","React","Component","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-documentation-references-creating-themes.2b6f1dad.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"creating-themes\"}}>{`Creating Themes`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`One of the main features of Docz is that you can create your own theme from scratch and just use data parsed from Docz.\nWe provide a bunch of components that can help you to create your own theme without pain.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's use this project structure through the following examples:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{}}>{`pages/\n  hello-world.mdx\nsrc/\n  ui/\n    Page.js\n  theme.js\ndoczrc.js\npackage.json\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"setting-theme-filepath\"}}>{`Setting theme filepath`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`First of all, you need to set the path of your theme in the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/docs/project-configuration\"}}>{`Project Configuration`}</MDXTag>{` by changing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`theme`}</MDXTag>{` property.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// doczrc.js\nexport default {\n  theme: 'src/theme',\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"creating-your-theme-component\"}}>{`Creating your theme component`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Then just create your component passing the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`children`}</MDXTag>{` inside it and export it as default using the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/docs/components-api\"}}><MDXTag name=\"inlineCode\" components={components} parentName=\"a\">{`theme()`}</MDXTag></MDXTag>{` high order component as an enhancer.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// src/theme.js\nimport React from 'react'\nimport { theme } from 'docz'\n\nconst Theme = ({ children }) => <div>{children}</div>\n\nexport default theme()(Theme)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"blockquote\" components={components}>\n<MDXTag name=\"p\" components={components} parentName=\"blockquote\">{`It's required to pass the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`children`}</MDXTag>{` property inside your theme in order to render Docz routes properly.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In fact, if you just create something like above you won't have nothing too much useful to show.\nSo, is important that you use the Docz `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"/docs/components-api\"}}>{`built-in components`}</MDXTag>{` to help you to create beautiful documents\npages and use the parsed data from data for mount menus and other things.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"default-theme-configuration\"}}>{`Default theme configuration`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Each theme has your own default `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`themeConfig`}</MDXTag>{` object that define whatever you want to turn customizable.\nIt's very useful to set something like custom fonts, colors, spaces, some styles properties and other project global variables.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// src/theme.js\nimport React from 'react'\nimport { theme } from 'docz'\n\nconst Theme = ({ children }) => <div>{children}</div>\n\nconst themeConfig = {\n  colors: {\n    primary: 'tomato',\n    secondary: 'khaki',\n    gray: 'lightslategray',\n  },\n}\n\nexport default theme(themeConfig)(Theme)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`By default, Docz will use this object as default configuration and merge it with the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`themeConfig`}</MDXTag>{` setting in the project configuration.\nUsing together with `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useConfig`}</MDXTag>{` hook you can do a lot of things, like use css-in-js theming or retrieve props from your `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`themeConfig`}</MDXTag>{` in a deep render component.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// src/theme.js\nimport React from 'react'\nimport { theme, useConfig } from 'docz'\nimport { ThemeProvider } from 'emotion-theming'\n\nconst Theme = () => {\n  const config = useConfig()\n  return (\n    <ThemeProvider theme={config}>\n      <div>My theme</div>\n    </ThemeProvider>\n  )\n}\n\nconst themeConfig = {\n  colors: {\n    primary: 'tomato',\n    secondary: 'khaki',\n    gray: 'lightslategray',\n  },\n}\n\nexport default theme(themeConfig)(Theme)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"providing-components\"}}>{`Providing Components`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How we explain in the components API section, the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<ComponentsProvider>`}</MDXTag>{` is the component responsible to\nprovide for MDX and Docz each component that you want to render inside your documents. With these\ncomponents passed to the provider, you can easily change how your mdx file will be rendered and change default behaviors and styles.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// src/theme.js\nimport React from 'react'\nimport { theme, useConfig, ComponentsProvider } from 'docz'\nimport { ThemeProvider } from 'emotion-theming'\n\nimport * as components from './ui'\n\nconst map = {\n  page: components.Page,\n  notFound: components.NotFound,\n  render: components.Render,\n  h1: components.H1,\n  h2: components.H2,\n  h3: components.H3,\n  h4: components.H4,\n  h5: components.H5,\n  h6: components.H6,\n  ul: components.List,\n  loading: components.Loading,\n  table: components.Table,\n  pre: components.Pre,\n  inlineCode: components.Code,\n}\n\nconst Theme = ({ children }) => {\n  const config = useConfig()\n  return (\n    <ThemeProvider theme={config}>\n      <ComponentsProvider components={map}>\n        {children}\n      </ComponentsProvider>\n    </ThemeProvider>\n  )\n}\n\nconst themeConfig = {\n  colors: {\n    primary: 'tomato',\n    secondary: 'khaki',\n    gray: 'lightslategray',\n  },\n}\n\nexport default theme(themeConfig)(Theme)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`This is powerful because it forces you to write base components and create a default style for each one that will be used along the entire documents without the need to repeat any of them.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"getting-data-from-documents\"}}>{`Getting data from documents`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`So far you almost have an entire theme component. But just with the code above you will see just a document page without any link or\ninformation about all documents do you have. Create something like a menu with all documents is essential to create navigation.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can do this easily by using the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`useMenus`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<Link>`}</MDXTag>{` component.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The first one will give you information about all menus parsed from Docz and the second one ability to navigate to them.\nFirst of all, create something like a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<Menu />`}</MDXTag>{` component (we using a menu just to illustrate here):`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// src/Menu.js\nimport React from 'react'\nimport { useMenus, Link } from 'docz'\n\nexport const Menu = () => {\n  const menus = useMenus()\n  return (\n    <ul>\n      {menus.map(menu => (\n        <li key={menu.id}>\n          <Link to={menu.route}>{menu.name}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Now you have a fully functional navigation to your documentation and you can simply use it your `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<Menu />`}</MDXTag>{` component inside your theme:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// src/theme.js\nimport React from 'react'\nimport { theme, useConfig, ComponentsProvider } from 'docz'\nimport { ThemeProvider } from 'emotion-theming'\n\nimport { Menu } from './Menu'\nimport * as components from './my-components'\n\nconst map = {\n  page: components.Page,\n  notFound: components.NotFound,\n  render: components.Render,\n  h1: components.H1,\n  h2: components.H2,\n  h3: components.H3,\n  h4: components.H4,\n  h5: components.H5,\n  h6: components.H6,\n  ul: components.List,\n  loading: components.Loading,\n  table: components.Table,\n  pre: components.Pre,\n  inlineCode: components.Code,\n}\n\nconst Theme = ({ children }) => {\n  const config = useConfig()\n  return (\n    <ThemeProvider theme={config}>\n      <Menu />\n      <ComponentsProvider components={map}>\n        {children}\n      </ComponentsProvider>\n    </ThemeProvider>\n  )\n}\n\nconst themeConfig = {\n  colors: {\n    primary: 'tomato',\n    secondary: 'khaki',\n    gray: 'lightslategray',\n  },\n}\n\nexport default theme(themeConfig)(Theme)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can still use this component to create other things like a search component, some custom page or whatever came in your mind.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"using-documents-settings\"}}>{`Using documents settings`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Another really interesting thing that you can do when you're creating your own theme is using the component's map `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`<Page>`}</MDXTag>{` to customize the document preview depending on each document settings. Since each document can have your own settings defined in the top of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.mdx`}</MDXTag>{` and the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Page`}</MDXTag>{` component receive a prop called `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`doc`}</MDXTag>{` that's the current rendered doc, you can use these settings to create page variations, like that:`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Let's suppose that some pages of your documentation should have a hero image, but some don't. You can give a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`hero`}</MDXTag>{` property for your document, and base on that prop you'll show or not the hero:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-markdown\"}}>{`---\nname: Hello world\nhero: /my/hero/img.png\n---\n\n# Hello world\n\nThis is just a page!\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`After defining the hero page of your document, let's see how your `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Page`}</MDXTag>{` component will look:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-js\"}}>{`// src/ui/Page.js\nimport React from 'react'\n\nimport MyCoolHero from './MyCoolHero'\n\nexport const Page = ({ doc, children }) => (\n  <div>\n    {doc.hero && <MyCoolHero img={doc.hero} />}\n    {children}\n  </div>\n)\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Simple as that! Now you can create a lot of variations of your documents page.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`How I told you, without pain and a lot of work your you can have a custom and very functional theme for your documentation. So, let's create your own theme and share with the community!`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"examples\"}}>{`Examples`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`If you wanna see an example of theme created, you can see the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/pedronauck/docz-website\",\"target\":\"_blank\",\"rel\":[\"nofollow\",\"noopener\",\"noreferrer\"]}}>{`source code`}</MDXTag>{` of this website that was entire build using Docz or the `}<MDXTag name=\"a\" components={components} parentName=\"p\" props={{\"href\":\"https://github.com/pedronauck/docz/tree/master/core/docz-theme-default\",\"target\":\"_blank\",\"rel\":[\"nofollow\",\"noopener\",\"noreferrer\"]}}>{`source code`}</MDXTag>{` of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`docz-theme-default`}</MDXTag>{`.`}</MDXTag>\n           </MDXTag>\n  }\n}\nMDXContent.isMDXComponent = true\n  "],"sourceRoot":""}